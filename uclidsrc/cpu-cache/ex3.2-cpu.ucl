module cpu {
  // type addr_t = common.addr_t;
  // type mem_t  = common.mem_t;
  // type word_t = common.word_t;
  // type op_t   = common.op_t;
  // type hit_t  = common.hit_t;
  type * = common.*;
  type regindex_t; // type of register file.
  type regs_t = [regindex_t]word_t;


  input imem         : mem_t; // program memory.
  // var dmem           : mem_t; // data memory.
  instance memory    : cache(); // cache + memory module
  var regs           : regs_t;
  var pc             : addr_t;
  var inst, result   : word_t;
  var waitLongCall   : integer;
  var cacheHit       : hit_t;

  var debug_op          : op_t;

  var s_addr : addr_t;
  var s_val  : word_t;
  var l_addr : addr_t;
  var l_val  : word_t;

  function inst2op   (i : word_t) : op_t;
  function inst2reg0 (i : word_t) : regindex_t;
  function inst2reg1 (i : word_t) : regindex_t;
  function inst2imm  (i : word_t) : word_t;
  function inst2addr (i : word_t) : addr_t;

  // procedure get_debug()
  //   modifies debug_op;
  // {
  //   debug_op = inst2op(imem[pc]);
  // }

  // procedure get_ch()
  //   returns (result: hit_t)
  // {
  //   result = cacheHit;
  // }  

  // procedure get_pc()
  //   returns (result: addr_t)
  // {
  //   result = pc;
  // }

  // procedure get_op()
  //   returns (result: op_t)
  // {
  //   result = inst2op(imem[pc]);
  // }

  procedure exec_inst(pc : addr_t, wlc : integer)
    returns (result : word_t, pc_next : addr_t, wlc2 : integer)
    modifies inst, regs, memory, cacheHit, debug_op, l_addr, l_val, s_addr, s_val;//, dmem;
  {
    var op           : op_t;
    var r0ind, r1ind : regindex_t;
    var r0, r1       : word_t;
    var pc_temp      : addr_t;

    inst = imem[pc];
    op = inst2op(inst);
    // globally visible state: for debug printing
    debug_op = op;
    r0ind, r1ind = inst2reg0(inst), inst2reg1(inst);
    r0, r1 = regs[r0ind], regs[r1ind]; 
    pc_temp = pc;
    wlc2 = wlc;
    case
      (op == op_mov)     : { result = inst2imm(inst); }
      (op == op_add)     : { result = r0 + r1; }
      (op == op_sub)     : { result = r0 - r1; }
      (op == op_load)    : { 
        call (result, cacheHit, wlc2) = memory.fetch_data(inst2addr(inst), wlc); 
        if (cacheHit == c_miss) { 
          pc_temp = pc_temp - 1bv8; 
        }
        else {
          regs[r0ind] = result;
          // globally visible state: for debug printing
          l_addr = inst2addr(inst);
          l_val = result;
        }
      }
      (op == op_store)   : { 
        call memory.put_data(inst2addr(inst), r0);
        // globally visible state: for debug printing
        s_addr = inst2addr(inst);
        s_val = r0;
      }
    esac
    pc_next = pc_temp + 1bv8;
  }


  // why do we need these procedures really?
  procedure get_store_details(pc: addr_t, op: op_t)
    returns(full_addr: addr_t, value: word_t)
  {
    var instruction  : word_t;
    // var op           : op_t;
    var r0ind        : regindex_t;
    var r0           : word_t;

    assert(op == op_store);

    r0ind = inst2reg0(inst);
    value = regs[r0ind]; 
    full_addr = inst2addr(inst);
  }

  // why do we need these procedures really?
  procedure get_load_details(pc: addr_t, op: op_t)
    returns(full_addr: addr_t, value: word_t)
  {
    var instruction  : word_t;
    // var op           : op_t;
    var r0ind        : regindex_t;
    var r0           : word_t;

    assert(op == op_load);
    assert(cacheHit == c_hit);

    r0ind = inst2reg0(inst);
    value = regs[r0ind]; 
    full_addr = inst2addr(inst);
  }

  init {
    assume (forall (r : regindex_t) :: regs[r] == 0bv8);
    // assume (forall (a : addr_t) :: dmem[a] == 0bv8);
    pc = 0bv8;
    inst = imem[pc];
    assume(waitLongCall == 0);
    assume(cacheHit == c_miss);
  }

  next {
    call (result', pc', waitLongCall') = exec_inst(pc, waitLongCall);
  }
}
