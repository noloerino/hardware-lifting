// Direct mapped write back cache
module cache {

	type * = common.*;
	
	var dmem		: mem_t;
	var dcache		: cmem_t;
	var c2mem_map	: cache_map_t;
	var dirtybits 	: [caddr_t]boolean;

	var debug_caddr : caddr_t;

	function addr2caddr (i : addr_t) : caddr_t;

	procedure fetch_data(full_addr: addr_t, waitCacheLoad: integer)
		returns (result: word_t, in_cache: hit_t, waitCacheLoadNew: integer)
		modifies dcache, c2mem_map, debug_caddr, dmem, dirtybits;
	{
		var cache_addr : caddr_t;

		cache_addr = addr2caddr(full_addr);
		debug_caddr = cache_addr;
		if(c2mem_map[cache_addr] == full_addr) {
			result = dcache[cache_addr];
			in_cache = c_hit;
			waitCacheLoadNew = 0;
		} else{
			if(waitCacheLoad < 3){
				in_cache = c_miss;
				waitCacheLoadNew = waitCacheLoad + 1;
			} else {
				if (dirtybits[cache_addr]) {
					dmem[c2mem_map[cache_addr]] = dcache[cache_addr];
					dirtybits[cache_addr] = false;
				}
				dcache[cache_addr] = dmem[full_addr];
				result = dcache[cache_addr];
				c2mem_map[cache_addr] = full_addr;
				in_cache = c_hit;
				waitCacheLoadNew = 0;
			}
		}
	}

	procedure put_data(full_addr: addr_t, content: word_t)
		modifies dcache, c2mem_map, debug_caddr, dmem, dirtybits;
	{
		var cache_addr : caddr_t;

		cache_addr = addr2caddr(full_addr);
		debug_caddr = cache_addr;
		// is line tag matching with store address? 
		if(c2mem_map[cache_addr] == full_addr) {
			dcache[cache_addr] = content;
			dirtybits[cache_addr] = true;
		}
		else{
			if (dirtybits[cache_addr]) {
				dmem[c2mem_map[cache_addr]] = dcache[cache_addr];
			}
			dcache[cache_addr] = content;
			c2mem_map[cache_addr] = full_addr;
			dirtybits[cache_addr] = true;
		}
	}

	init {
		assume (forall (r : caddr_t) :: !dirtybits[r]);
	}
}