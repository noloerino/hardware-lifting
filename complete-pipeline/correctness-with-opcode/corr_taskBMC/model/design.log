
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 a58571d0, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: __lft__corr.v
Parsing formal SystemVerilog input from `__lft__corr.v' to AST representation.
Storing AST representation for module `$abstract\CSR'.
Storing AST representation for module `$abstract\RegFile'.
Storing AST representation for module `$abstract\ALUArea'.
Storing AST representation for module `$abstract\ImmGenWire'.
Storing AST representation for module `$abstract\BrCondArea'.
Storing AST representation for module `$abstract\Datapath'.
Storing AST representation for module `$abstract\Control'.
Storing AST representation for module `$abstract\Core'.
Storing AST representation for module `$abstract\Cache'.
Storing AST representation for module `$abstract\MemArbiter'.
Storing AST representation for module `$abstract\Tile'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Tile'.
Generating RTLIL representation for module `\Tile'.

2.2.1. Analyzing design hierarchy..
Top module:  \Tile

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\MemArbiter'.
Generating RTLIL representation for module `\MemArbiter'.

2.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\Cache'.
Generating RTLIL representation for module `\Cache'.

2.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\Core'.
Generating RTLIL representation for module `\Core'.

2.2.5. Analyzing design hierarchy..
Top module:  \Tile
Used module:     \MemArbiter
Used module:     \Cache
Used module:     \Core

2.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Control'.
Generating RTLIL representation for module `\Control'.

2.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Datapath'.
Generating RTLIL representation for module `\Datapath'.

2.2.8. Analyzing design hierarchy..
Top module:  \Tile
Used module:     \MemArbiter
Used module:     \Cache
Used module:     \Core
Used module:         \Control
Used module:         \Datapath

2.2.9. Executing AST frontend in derive mode using pre-parsed AST for module `\BrCondArea'.
Generating RTLIL representation for module `\BrCondArea'.

2.2.10. Executing AST frontend in derive mode using pre-parsed AST for module `\ImmGenWire'.
Generating RTLIL representation for module `\ImmGenWire'.

2.2.11. Executing AST frontend in derive mode using pre-parsed AST for module `\ALUArea'.
Generating RTLIL representation for module `\ALUArea'.

2.2.12. Executing AST frontend in derive mode using pre-parsed AST for module `\RegFile'.
Generating RTLIL representation for module `\RegFile'.

2.2.13. Executing AST frontend in derive mode using pre-parsed AST for module `\CSR'.
Generating RTLIL representation for module `\CSR'.

2.2.14. Analyzing design hierarchy..
Top module:  \Tile
Used module:     \MemArbiter
Used module:     \Cache
Used module:     \Core
Used module:         \Control
Used module:         \Datapath
Used module:             \BrCondArea
Used module:             \ImmGenWire
Used module:             \ALUArea
Used module:             \RegFile
Used module:             \CSR

2.2.15. Analyzing design hierarchy..
Top module:  \Tile
Used module:     \MemArbiter
Used module:     \Cache
Used module:     \Core
Used module:         \Control
Used module:         \Datapath
Used module:             \BrCondArea
Used module:             \ImmGenWire
Used module:             \ALUArea
Used module:             \RegFile
Used module:             \CSR
Removing unused module `$abstract\Tile'.
Removing unused module `$abstract\MemArbiter'.
Removing unused module `$abstract\Cache'.
Removing unused module `$abstract\Core'.
Removing unused module `$abstract\Control'.
Removing unused module `$abstract\Datapath'.
Removing unused module `$abstract\BrCondArea'.
Removing unused module `$abstract\ImmGenWire'.
Removing unused module `$abstract\ALUArea'.
Removing unused module `$abstract\RegFile'.
Removing unused module `$abstract\CSR'.
Removed 11 unused modules.
Module Tile directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\Datapath.$proc$__lft__corr.v:3307$1008'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 197 switch rules as full_case in process $proc$__lft__corr.v:1175$1596 in module CSR.
Marked 1 switch rules as full_case in process $proc$__lft__corr.v:2294$1135 in module RegFile.
Marked 15 switch rules as full_case in process $proc$__lft__corr.v:3307$1008 in module Datapath.
Marked 37 switch rules as full_case in process $proc$__lft__corr.v:5695$235 in module Cache.
Marked 7 switch rules as full_case in process $proc$__lft__corr.v:6116$68 in module MemArbiter.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 64 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Tile.$proc$__lft__corr.v:0$17'.
  Set init value: $formal$__lft__corr.v:6571$2_EN = 1'0
Found init rule in `\Tile.$proc$__lft__corr.v:0$15'.
  Set init value: $formal$__lft__corr.v:6570$1_EN = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\CSR.$proc$__lft__corr.v:1175$1596'.
     1/20: $0\cycle[31:0]
     2/20: $0\time$[31:0]$1597
     3/20: $0\mfromhost[31:0]
     4/20: $0\mtohost[31:0]
     5/20: $0\mbadaddr[31:0]
     6/20: $0\mcause[31:0]
     7/20: $0\mscratch[31:0]
     8/20: $0\mtimecmp[31:0]
     9/20: $0\MSIE[0:0]
    10/20: $0\MSIP[0:0]
    11/20: $0\MTIE[0:0]
    12/20: $0\MTIP[0:0]
    13/20: $0\IE1[0:0]
    14/20: $0\IE[0:0]
    15/20: $0\PRV1[1:0]
    16/20: $0\PRV[1:0]
    17/20: $0\instreth[31:0]
    18/20: $0\instret[31:0]
    19/20: $0\cycleh[31:0]
    20/20: $0\timeh[31:0]
Creating decoders for process `\RegFile.$proc$__lft__corr.v:2294$1135'.
     1/3: $1$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1142
     2/3: $1$memwr$\regs$__lft__corr.v:2296$1126_DATA[31:0]$1141
     3/3: $1$memwr$\regs$__lft__corr.v:2296$1126_ADDR[4:0]$1140
Creating decoders for process `\Datapath.$proc$__lft__corr.v:3307$1008'.
     1/14: $0\pc[32:0]
     2/14: $0\pc_check[0:0]
     3/14: $0\illegal[0:0]
     4/14: $0\csr_cmd[2:0]
     5/14: $0\wb_en[0:0]
     6/14: $0\wb_sel[1:0]
     7/14: $0\ld_type[2:0]
     8/14: $0\st_type[1:0]
     9/14: $0\csr_in[31:0]
    10/14: $0\ew_alu[31:0]
    11/14: $0\ew_pc[32:0]
    12/14: $0\ew_inst[31:0]
    13/14: $0\fe_pc[32:0]
    14/14: $0\fe_inst[31:0]
Creating decoders for process `\Cache.$proc$__lft__corr.v:5695$235'.
     1/79: $1$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$354
     2/79: $1$memwr$\dataMem_3_3$__lft__corr.v:5888$85_DATA[7:0]$353
     3/79: $1$memwr$\dataMem_3_3$__lft__corr.v:5888$85_ADDR[7:0]$352
     4/79: $1$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$350
     5/79: $1$memwr$\dataMem_3_2$__lft__corr.v:5882$84_DATA[7:0]$349
     6/79: $1$memwr$\dataMem_3_2$__lft__corr.v:5882$84_ADDR[7:0]$348
     7/79: $1$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$346
     8/79: $1$memwr$\dataMem_3_1$__lft__corr.v:5876$83_DATA[7:0]$345
     9/79: $1$memwr$\dataMem_3_1$__lft__corr.v:5876$83_ADDR[7:0]$344
    10/79: $1$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$342
    11/79: $1$memwr$\dataMem_3_0$__lft__corr.v:5870$82_DATA[7:0]$341
    12/79: $1$memwr$\dataMem_3_0$__lft__corr.v:5870$82_ADDR[7:0]$340
    13/79: $1$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$338
    14/79: $1$memwr$\dataMem_2_3$__lft__corr.v:5864$81_DATA[7:0]$337
    15/79: $1$memwr$\dataMem_2_3$__lft__corr.v:5864$81_ADDR[7:0]$336
    16/79: $1$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$334
    17/79: $1$memwr$\dataMem_2_2$__lft__corr.v:5858$80_DATA[7:0]$333
    18/79: $1$memwr$\dataMem_2_2$__lft__corr.v:5858$80_ADDR[7:0]$332
    19/79: $1$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$330
    20/79: $1$memwr$\dataMem_2_1$__lft__corr.v:5852$79_DATA[7:0]$329
    21/79: $1$memwr$\dataMem_2_1$__lft__corr.v:5852$79_ADDR[7:0]$328
    22/79: $1$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$326
    23/79: $1$memwr$\dataMem_2_0$__lft__corr.v:5846$78_DATA[7:0]$325
    24/79: $1$memwr$\dataMem_2_0$__lft__corr.v:5846$78_ADDR[7:0]$324
    25/79: $1$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$322
    26/79: $1$memwr$\dataMem_1_3$__lft__corr.v:5840$77_DATA[7:0]$321
    27/79: $1$memwr$\dataMem_1_3$__lft__corr.v:5840$77_ADDR[7:0]$320
    28/79: $1$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$318
    29/79: $1$memwr$\dataMem_1_2$__lft__corr.v:5834$76_DATA[7:0]$317
    30/79: $1$memwr$\dataMem_1_2$__lft__corr.v:5834$76_ADDR[7:0]$316
    31/79: $1$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$314
    32/79: $1$memwr$\dataMem_1_1$__lft__corr.v:5828$75_DATA[7:0]$313
    33/79: $1$memwr$\dataMem_1_1$__lft__corr.v:5828$75_ADDR[7:0]$312
    34/79: $1$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$310
    35/79: $1$memwr$\dataMem_1_0$__lft__corr.v:5822$74_DATA[7:0]$309
    36/79: $1$memwr$\dataMem_1_0$__lft__corr.v:5822$74_ADDR[7:0]$308
    37/79: $1$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$306
    38/79: $1$memwr$\dataMem_0_3$__lft__corr.v:5816$73_DATA[7:0]$305
    39/79: $1$memwr$\dataMem_0_3$__lft__corr.v:5816$73_ADDR[7:0]$304
    40/79: $1$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$302
    41/79: $1$memwr$\dataMem_0_2$__lft__corr.v:5810$72_DATA[7:0]$301
    42/79: $1$memwr$\dataMem_0_2$__lft__corr.v:5810$72_ADDR[7:0]$300
    43/79: $1$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$298
    44/79: $1$memwr$\dataMem_0_1$__lft__corr.v:5804$71_DATA[7:0]$297
    45/79: $1$memwr$\dataMem_0_1$__lft__corr.v:5804$71_ADDR[7:0]$296
    46/79: $1$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$294
    47/79: $1$memwr$\dataMem_0_0$__lft__corr.v:5798$70_DATA[7:0]$293
    48/79: $1$memwr$\dataMem_0_0$__lft__corr.v:5798$70_ADDR[7:0]$292
    49/79: $1$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$290
    50/79: $1$memwr$\metaMem_tag$__lft__corr.v:5792$69_DATA[19:0]$289
    51/79: $1$memwr$\metaMem_tag$__lft__corr.v:5792$69_ADDR[7:0]$288
    52/79: $0\refill_buf_1[63:0]
    53/79: $0\refill_buf_0[63:0]
    54/79: $0\rdata_buf[127:0]
    55/79: $0\value_1[0:0]
    56/79: $0\value[0:0]
    57/79: $0\cpu_mask[3:0]
    58/79: $0\cpu_data[31:0]
    59/79: $0\addr_reg[31:0]
    60/79: $0\dataMem_3_3__T_210_addr_pipe_0[7:0]
    61/79: $0\dataMem_3_2__T_210_addr_pipe_0[7:0]
    62/79: $0\dataMem_3_1__T_210_addr_pipe_0[7:0]
    63/79: $0\dataMem_3_0__T_210_addr_pipe_0[7:0]
    64/79: $0\dataMem_2_3__T_190_addr_pipe_0[7:0]
    65/79: $0\dataMem_2_2__T_190_addr_pipe_0[7:0]
    66/79: $0\dataMem_2_1__T_190_addr_pipe_0[7:0]
    67/79: $0\dataMem_2_0__T_190_addr_pipe_0[7:0]
    68/79: $0\dataMem_1_3__T_170_addr_pipe_0[7:0]
    69/79: $0\dataMem_1_2__T_170_addr_pipe_0[7:0]
    70/79: $0\dataMem_1_1__T_170_addr_pipe_0[7:0]
    71/79: $0\dataMem_1_0__T_170_addr_pipe_0[7:0]
    72/79: $0\dataMem_0_3__T_150_addr_pipe_0[7:0]
    73/79: $0\dataMem_0_2__T_150_addr_pipe_0[7:0]
    74/79: $0\dataMem_0_1__T_150_addr_pipe_0[7:0]
    75/79: $0\dataMem_0_0__T_150_addr_pipe_0[7:0]
    76/79: $0\metaMem_tag_rmeta_addr_pipe_0[7:0]
    77/79: $0\d[255:0]
    78/79: $0\v[255:0]
    79/79: $0\state[2:0]
Creating decoders for process `\MemArbiter.$proc$__lft__corr.v:6116$68'.
     1/1: $0\state[2:0]
Creating decoders for process `\Tile.$proc$__lft__corr.v:0$17'.
Creating decoders for process `\Tile.$proc$__lft__corr.v:0$15'.
Creating decoders for process `\Tile.$proc$__lft__corr.v:6570$3'.

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\CSR.\time$' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2903' with positive edge clock.
Creating register for signal `\CSR.\timeh' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2904' with positive edge clock.
Creating register for signal `\CSR.\cycle' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2905' with positive edge clock.
Creating register for signal `\CSR.\cycleh' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2906' with positive edge clock.
Creating register for signal `\CSR.\instret' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2907' with positive edge clock.
Creating register for signal `\CSR.\instreth' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2908' with positive edge clock.
Creating register for signal `\CSR.\PRV' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2909' with positive edge clock.
Creating register for signal `\CSR.\PRV1' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2910' with positive edge clock.
Creating register for signal `\CSR.\IE' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2911' with positive edge clock.
Creating register for signal `\CSR.\IE1' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2912' with positive edge clock.
Creating register for signal `\CSR.\MTIP' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2913' with positive edge clock.
Creating register for signal `\CSR.\MTIE' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2914' with positive edge clock.
Creating register for signal `\CSR.\MSIP' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2915' with positive edge clock.
Creating register for signal `\CSR.\MSIE' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2916' with positive edge clock.
Creating register for signal `\CSR.\mtimecmp' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2917' with positive edge clock.
Creating register for signal `\CSR.\mscratch' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2918' with positive edge clock.
Creating register for signal `\CSR.\mepc' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2919' with positive edge clock.
Creating register for signal `\CSR.\mcause' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2920' with positive edge clock.
Creating register for signal `\CSR.\mbadaddr' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2921' with positive edge clock.
Creating register for signal `\CSR.\mtohost' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2922' with positive edge clock.
Creating register for signal `\CSR.\mfromhost' using process `\CSR.$proc$__lft__corr.v:1175$1596'.
  created $dff cell `$procdff$2923' with positive edge clock.
Creating register for signal `\RegFile.$memwr$\regs$__lft__corr.v:2296$1126_ADDR' using process `\RegFile.$proc$__lft__corr.v:2294$1135'.
  created $dff cell `$procdff$2924' with positive edge clock.
Creating register for signal `\RegFile.$memwr$\regs$__lft__corr.v:2296$1126_DATA' using process `\RegFile.$proc$__lft__corr.v:2294$1135'.
  created $dff cell `$procdff$2925' with positive edge clock.
Creating register for signal `\RegFile.$memwr$\regs$__lft__corr.v:2296$1126_EN' using process `\RegFile.$proc$__lft__corr.v:2294$1135'.
  created $dff cell `$procdff$2926' with positive edge clock.
Creating register for signal `\Datapath.\fe_inst' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2927' with positive edge clock.
Creating register for signal `\Datapath.\fe_pc' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2928' with positive edge clock.
Creating register for signal `\Datapath.\ew_inst' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2929' with positive edge clock.
Creating register for signal `\Datapath.\ew_pc' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2930' with positive edge clock.
Creating register for signal `\Datapath.\ew_alu' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2931' with positive edge clock.
Creating register for signal `\Datapath.\csr_in' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2932' with positive edge clock.
Creating register for signal `\Datapath.\st_type' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2933' with positive edge clock.
Creating register for signal `\Datapath.\ld_type' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2934' with positive edge clock.
Creating register for signal `\Datapath.\wb_sel' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2935' with positive edge clock.
Creating register for signal `\Datapath.\wb_en' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2936' with positive edge clock.
Creating register for signal `\Datapath.\csr_cmd' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2937' with positive edge clock.
Creating register for signal `\Datapath.\illegal' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2938' with positive edge clock.
Creating register for signal `\Datapath.\pc_check' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2939' with positive edge clock.
Creating register for signal `\Datapath.\started' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2940' with positive edge clock.
Creating register for signal `\Datapath.\pc' using process `\Datapath.$proc$__lft__corr.v:3307$1008'.
  created $dff cell `$procdff$2941' with positive edge clock.
Creating register for signal `\Cache.\state' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2942' with positive edge clock.
Creating register for signal `\Cache.\v' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2943' with positive edge clock.
Creating register for signal `\Cache.\d' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2944' with positive edge clock.
Creating register for signal `\Cache.\metaMem_tag_rmeta_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2945' with positive edge clock.
Creating register for signal `\Cache.\dataMem_0_0__T_150_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2946' with positive edge clock.
Creating register for signal `\Cache.\dataMem_0_1__T_150_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2947' with positive edge clock.
Creating register for signal `\Cache.\dataMem_0_2__T_150_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2948' with positive edge clock.
Creating register for signal `\Cache.\dataMem_0_3__T_150_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2949' with positive edge clock.
Creating register for signal `\Cache.\dataMem_1_0__T_170_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2950' with positive edge clock.
Creating register for signal `\Cache.\dataMem_1_1__T_170_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2951' with positive edge clock.
Creating register for signal `\Cache.\dataMem_1_2__T_170_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2952' with positive edge clock.
Creating register for signal `\Cache.\dataMem_1_3__T_170_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2953' with positive edge clock.
Creating register for signal `\Cache.\dataMem_2_0__T_190_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2954' with positive edge clock.
Creating register for signal `\Cache.\dataMem_2_1__T_190_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2955' with positive edge clock.
Creating register for signal `\Cache.\dataMem_2_2__T_190_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2956' with positive edge clock.
Creating register for signal `\Cache.\dataMem_2_3__T_190_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2957' with positive edge clock.
Creating register for signal `\Cache.\dataMem_3_0__T_210_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2958' with positive edge clock.
Creating register for signal `\Cache.\dataMem_3_1__T_210_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2959' with positive edge clock.
Creating register for signal `\Cache.\dataMem_3_2__T_210_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2960' with positive edge clock.
Creating register for signal `\Cache.\dataMem_3_3__T_210_addr_pipe_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2961' with positive edge clock.
Creating register for signal `\Cache.\addr_reg' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2962' with positive edge clock.
Creating register for signal `\Cache.\cpu_data' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2963' with positive edge clock.
Creating register for signal `\Cache.\cpu_mask' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2964' with positive edge clock.
Creating register for signal `\Cache.\value' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2965' with positive edge clock.
Creating register for signal `\Cache.\value_1' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2966' with positive edge clock.
Creating register for signal `\Cache.\is_alloc_reg' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2967' with positive edge clock.
Creating register for signal `\Cache.\ren_reg' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2968' with positive edge clock.
Creating register for signal `\Cache.\rdata_buf' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2969' with positive edge clock.
Creating register for signal `\Cache.\refill_buf_0' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2970' with positive edge clock.
Creating register for signal `\Cache.\refill_buf_1' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2971' with positive edge clock.
Creating register for signal `\Cache.$memwr$\metaMem_tag$__lft__corr.v:5792$69_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2972' with positive edge clock.
Creating register for signal `\Cache.$memwr$\metaMem_tag$__lft__corr.v:5792$69_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2973' with positive edge clock.
Creating register for signal `\Cache.$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2974' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_0$__lft__corr.v:5798$70_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2975' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_0$__lft__corr.v:5798$70_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2976' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2977' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_1$__lft__corr.v:5804$71_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2978' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_1$__lft__corr.v:5804$71_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2979' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2980' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_2$__lft__corr.v:5810$72_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2981' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_2$__lft__corr.v:5810$72_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2982' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2983' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_3$__lft__corr.v:5816$73_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2984' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_3$__lft__corr.v:5816$73_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2985' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2986' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_0$__lft__corr.v:5822$74_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2987' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_0$__lft__corr.v:5822$74_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2988' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2989' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_1$__lft__corr.v:5828$75_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2990' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_1$__lft__corr.v:5828$75_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2991' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2992' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_2$__lft__corr.v:5834$76_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2993' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_2$__lft__corr.v:5834$76_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2994' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2995' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_3$__lft__corr.v:5840$77_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2996' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_3$__lft__corr.v:5840$77_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2997' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2998' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_0$__lft__corr.v:5846$78_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$2999' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_0$__lft__corr.v:5846$78_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3000' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3001' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_1$__lft__corr.v:5852$79_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3002' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_1$__lft__corr.v:5852$79_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3003' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3004' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_2$__lft__corr.v:5858$80_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3005' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_2$__lft__corr.v:5858$80_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3006' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3007' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_3$__lft__corr.v:5864$81_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3008' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_3$__lft__corr.v:5864$81_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3009' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3010' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_0$__lft__corr.v:5870$82_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3011' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_0$__lft__corr.v:5870$82_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3012' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3013' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_1$__lft__corr.v:5876$83_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3014' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_1$__lft__corr.v:5876$83_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3015' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3016' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_2$__lft__corr.v:5882$84_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3017' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_2$__lft__corr.v:5882$84_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3018' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3019' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_3$__lft__corr.v:5888$85_ADDR' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3020' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_3$__lft__corr.v:5888$85_DATA' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3021' with positive edge clock.
Creating register for signal `\Cache.$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN' using process `\Cache.$proc$__lft__corr.v:5695$235'.
  created $dff cell `$procdff$3022' with positive edge clock.
Creating register for signal `\MemArbiter.\state' using process `\MemArbiter.$proc$__lft__corr.v:6116$68'.
  created $dff cell `$procdff$3023' with positive edge clock.
Creating register for signal `\Tile.$formal$__lft__corr.v:6570$1_CHECK' using process `\Tile.$proc$__lft__corr.v:6570$3'.
  created $dff cell `$procdff$3024' with positive edge clock.
Creating register for signal `\Tile.$formal$__lft__corr.v:6570$1_EN' using process `\Tile.$proc$__lft__corr.v:6570$3'.
  created $dff cell `$procdff$3025' with positive edge clock.
Creating register for signal `\Tile.$formal$__lft__corr.v:6571$2_CHECK' using process `\Tile.$proc$__lft__corr.v:6570$3'.
  created $dff cell `$procdff$3026' with positive edge clock.
Creating register for signal `\Tile.$formal$__lft__corr.v:6571$2_EN' using process `\Tile.$proc$__lft__corr.v:6570$3'.
  created $dff cell `$procdff$3027' with positive edge clock.

2.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 317 empty switches in `\CSR.$proc$__lft__corr.v:1175$1596'.
Removing empty process `CSR.$proc$__lft__corr.v:1175$1596'.
Found and cleaned up 1 empty switch in `\RegFile.$proc$__lft__corr.v:2294$1135'.
Removing empty process `RegFile.$proc$__lft__corr.v:2294$1135'.
Found and cleaned up 35 empty switches in `\Datapath.$proc$__lft__corr.v:3307$1008'.
Removing empty process `Datapath.$proc$__lft__corr.v:3307$1008'.
Found and cleaned up 74 empty switches in `\Cache.$proc$__lft__corr.v:5695$235'.
Removing empty process `Cache.$proc$__lft__corr.v:5695$235'.
Found and cleaned up 13 empty switches in `\MemArbiter.$proc$__lft__corr.v:6116$68'.
Removing empty process `MemArbiter.$proc$__lft__corr.v:6116$68'.
Removing empty process `Tile.$proc$__lft__corr.v:0$17'.
Removing empty process `Tile.$proc$__lft__corr.v:0$15'.
Removing empty process `Tile.$proc$__lft__corr.v:6570$3'.
Cleaned up 440 empty switches.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module CSR.
<suppressed ~118 debug messages>
Optimizing module RegFile.
<suppressed ~4 debug messages>
Optimizing module ALUArea.
<suppressed ~11 debug messages>
Optimizing module ImmGenWire.
Optimizing module BrCondArea.
<suppressed ~4 debug messages>
Optimizing module Datapath.
<suppressed ~29 debug messages>
Optimizing module Control.
Optimizing module Core.
Optimizing module Cache.
<suppressed ~20 debug messages>
Optimizing module MemArbiter.
<suppressed ~4 debug messages>
Optimizing module Tile.
<suppressed ~2 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \Tile..
Removed 437 unused cells and 2600 unused wires.
<suppressed ~846 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module ALUArea...
Checking module BrCondArea...
Checking module CSR...
Checking module Cache...
Checking module Control...
Checking module Core...
Checking module Datapath...
Checking module ImmGenWire...
Checking module MemArbiter...
Checking module RegFile...
Checking module Tile...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUArea.
Optimizing module BrCondArea.
Optimizing module CSR.
Optimizing module Cache.
Optimizing module Control.
Optimizing module Core.
Optimizing module Datapath.
Optimizing module ImmGenWire.
Optimizing module MemArbiter.
Optimizing module RegFile.
Optimizing module Tile.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUArea'.
Finding identical cells in module `\BrCondArea'.
Finding identical cells in module `\CSR'.
Finding identical cells in module `\Cache'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Control'.
Finding identical cells in module `\Core'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\ImmGenWire'.
Finding identical cells in module `\MemArbiter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\RegFile'.
Finding identical cells in module `\Tile'.
<suppressed ~3 debug messages>
Removed a total of 3 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUArea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \BrCondArea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CSR..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Cache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Core..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ImmGenWire..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MemArbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RegFile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Tile..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~185 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUArea.
  Optimizing cells in module \BrCondArea.
  Optimizing cells in module \CSR.
  Optimizing cells in module \Cache.
    Consolidated identical input bits for $mux cell $procmux$2584:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0]
      New connections: $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [7:1] = { $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0] $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0] $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0] $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0] $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0] $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0] $0$memwr$\dataMem_3_3$__lft__corr.v:5888$85_EN[7:0]$286 [0] }
    Consolidated identical input bits for $mux cell $procmux$2593:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0]
      New connections: $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [7:1] = { $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0] $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0] $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0] $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0] $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0] $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0] $0$memwr$\dataMem_3_2$__lft__corr.v:5882$84_EN[7:0]$283 [0] }
    Consolidated identical input bits for $mux cell $procmux$2602:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0]
      New connections: $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [7:1] = { $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0] $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0] $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0] $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0] $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0] $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0] $0$memwr$\dataMem_3_1$__lft__corr.v:5876$83_EN[7:0]$280 [0] }
    Consolidated identical input bits for $mux cell $procmux$2611:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0]
      New connections: $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [7:1] = { $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0] $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0] $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0] $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0] $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0] $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0] $0$memwr$\dataMem_3_0$__lft__corr.v:5870$82_EN[7:0]$277 [0] }
    Consolidated identical input bits for $mux cell $procmux$2620:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0]
      New connections: $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [7:1] = { $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0] $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0] $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0] $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0] $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0] $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0] $0$memwr$\dataMem_2_3$__lft__corr.v:5864$81_EN[7:0]$274 [0] }
    Consolidated identical input bits for $mux cell $procmux$2629:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0]
      New connections: $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [7:1] = { $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0] $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0] $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0] $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0] $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0] $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0] $0$memwr$\dataMem_2_2$__lft__corr.v:5858$80_EN[7:0]$271 [0] }
    Consolidated identical input bits for $mux cell $procmux$2638:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0]
      New connections: $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [7:1] = { $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0] $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0] $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0] $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0] $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0] $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0] $0$memwr$\dataMem_2_1$__lft__corr.v:5852$79_EN[7:0]$268 [0] }
    Consolidated identical input bits for $mux cell $procmux$2647:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0]
      New connections: $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [7:1] = { $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0] $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0] $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0] $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0] $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0] $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0] $0$memwr$\dataMem_2_0$__lft__corr.v:5846$78_EN[7:0]$265 [0] }
    Consolidated identical input bits for $mux cell $procmux$2656:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0]
      New connections: $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [7:1] = { $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0] $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0] $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0] $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0] $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0] $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0] $0$memwr$\dataMem_1_3$__lft__corr.v:5840$77_EN[7:0]$262 [0] }
    Consolidated identical input bits for $mux cell $procmux$2665:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0]
      New connections: $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [7:1] = { $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0] $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0] $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0] $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0] $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0] $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0] $0$memwr$\dataMem_1_2$__lft__corr.v:5834$76_EN[7:0]$259 [0] }
    Consolidated identical input bits for $mux cell $procmux$2674:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0]
      New connections: $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [7:1] = { $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0] $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0] $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0] $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0] $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0] $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0] $0$memwr$\dataMem_1_1$__lft__corr.v:5828$75_EN[7:0]$256 [0] }
    Consolidated identical input bits for $mux cell $procmux$2683:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0]
      New connections: $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [7:1] = { $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0] $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0] $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0] $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0] $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0] $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0] $0$memwr$\dataMem_1_0$__lft__corr.v:5822$74_EN[7:0]$253 [0] }
    Consolidated identical input bits for $mux cell $procmux$2692:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0]
      New connections: $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [7:1] = { $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0] $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0] $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0] $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0] $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0] $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0] $0$memwr$\dataMem_0_3$__lft__corr.v:5816$73_EN[7:0]$250 [0] }
    Consolidated identical input bits for $mux cell $procmux$2701:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0]
      New connections: $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [7:1] = { $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0] $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0] $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0] $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0] $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0] $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0] $0$memwr$\dataMem_0_2$__lft__corr.v:5810$72_EN[7:0]$247 [0] }
    Consolidated identical input bits for $mux cell $procmux$2710:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0]
      New connections: $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [7:1] = { $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0] $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0] $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0] $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0] $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0] $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0] $0$memwr$\dataMem_0_1$__lft__corr.v:5804$71_EN[7:0]$244 [0] }
    Consolidated identical input bits for $mux cell $procmux$2719:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241
      New ports: A=1'0, B=1'1, Y=$0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0]
      New connections: $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [7:1] = { $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0] $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0] $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0] $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0] $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0] $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0] $0$memwr$\dataMem_0_0$__lft__corr.v:5798$70_EN[7:0]$241 [0] }
    Consolidated identical input bits for $mux cell $procmux$2728:
      Old ports: A=20'00000000000000000000, B=20'11111111111111111111, Y=$0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238
      New ports: A=1'0, B=1'1, Y=$0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0]
      New connections: $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [19:1] = { $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] $0$memwr$\metaMem_tag$__lft__corr.v:5792$69_EN[19:0]$238 [0] }
  Optimizing cells in module \Cache.
  Optimizing cells in module \Control.
  Optimizing cells in module \Core.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \ImmGenWire.
  Optimizing cells in module \MemArbiter.
  Optimizing cells in module \RegFile.
    Consolidated identical input bits for $mux cell $procmux$2490:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138
      New ports: A=1'0, B=1'1, Y=$0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0]
      New connections: $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [31:1] = { $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] $0$memwr$\regs$__lft__corr.v:2296$1126_EN[31:0]$1138 [0] }
  Optimizing cells in module \RegFile.
  Optimizing cells in module \Tile.
Performed a total of 18 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUArea'.
Finding identical cells in module `\BrCondArea'.
Finding identical cells in module `\CSR'.
<suppressed ~177 debug messages>
Finding identical cells in module `\Cache'.
<suppressed ~15 debug messages>
Finding identical cells in module `\Control'.
Finding identical cells in module `\Core'.
Finding identical cells in module `\Datapath'.
<suppressed ~18 debug messages>
Finding identical cells in module `\ImmGenWire'.
Finding identical cells in module `\MemArbiter'.
<suppressed ~3 debug messages>
Finding identical cells in module `\RegFile'.
Finding identical cells in module `\Tile'.
Removed a total of 71 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \Tile..
Removed 0 unused cells and 72 unused wires.
<suppressed ~5 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUArea.
Optimizing module BrCondArea.
Optimizing module CSR.
Optimizing module Cache.
Optimizing module Control.
Optimizing module Core.
Optimizing module Datapath.
Optimizing module ImmGenWire.
Optimizing module MemArbiter.
Optimizing module RegFile.
Optimizing module Tile.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUArea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \BrCondArea..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CSR..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Cache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Core..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ImmGenWire..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MemArbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \RegFile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Tile..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~189 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUArea.
  Optimizing cells in module \BrCondArea.
  Optimizing cells in module \CSR.
  Optimizing cells in module \Cache.
  Optimizing cells in module \Control.
  Optimizing cells in module \Core.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \ImmGenWire.
  Optimizing cells in module \MemArbiter.
  Optimizing cells in module \RegFile.
  Optimizing cells in module \Tile.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUArea'.
Finding identical cells in module `\BrCondArea'.
Finding identical cells in module `\CSR'.
Finding identical cells in module `\Cache'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\Core'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\ImmGenWire'.
Finding identical cells in module `\MemArbiter'.
Finding identical cells in module `\RegFile'.
Finding identical cells in module `\Tile'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \Tile..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUArea.
Optimizing module BrCondArea.
Optimizing module CSR.
Optimizing module Cache.
Optimizing module Control.
Optimizing module Core.
Optimizing module Datapath.
Optimizing module ImmGenWire.
Optimizing module MemArbiter.
Optimizing module RegFile.
Optimizing module Tile.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port A of cell ALUArea.$sub$__lft__corr.v:2434$1054 ($sub).
Removed top 1 bits (of 33) from port Y of cell ALUArea.$sub$__lft__corr.v:2434$1054 ($sub).
Removed top 1 bits (of 33) from port Y of cell ALUArea.$add$__lft__corr.v:2438$1056 ($add).
Removed top 16 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2455$1062 ($or).
Removed top 8 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2458$1063 ($and).
Removed top 8 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2458$1063 ($and).
Removed top 8 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2458$1063 ($and).
Removed top 8 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2463$1066 ($or).
Removed top 4 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2466$1067 ($and).
Removed top 4 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2466$1067 ($and).
Removed top 4 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2466$1067 ($and).
Removed top 4 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2471$1070 ($or).
Removed top 2 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2474$1071 ($and).
Removed top 2 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2474$1071 ($and).
Removed top 2 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2474$1071 ($and).
Removed top 2 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2479$1074 ($or).
Removed top 1 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2482$1075 ($and).
Removed top 1 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2482$1075 ($and).
Removed top 1 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2482$1075 ($and).
Removed top 1 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2487$1078 ($or).
Removed top 1 bits (of 33) from port Y of cell ALUArea.$sshr$__lft__corr.v:2493$1081 ($sshr).
Removed top 16 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2501$1084 ($or).
Removed top 8 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2504$1085 ($and).
Removed top 8 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2504$1085 ($and).
Removed top 8 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2504$1085 ($and).
Removed top 8 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2509$1088 ($or).
Removed top 4 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2512$1089 ($and).
Removed top 4 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2512$1089 ($and).
Removed top 4 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2512$1089 ($and).
Removed top 4 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2517$1092 ($or).
Removed top 2 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2520$1093 ($and).
Removed top 2 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2520$1093 ($and).
Removed top 2 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2520$1093 ($and).
Removed top 2 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2525$1096 ($or).
Removed top 1 bits (of 32) from port A of cell ALUArea.$and$__lft__corr.v:2528$1097 ($and).
Removed top 1 bits (of 32) from port B of cell ALUArea.$and$__lft__corr.v:2528$1097 ($and).
Removed top 1 bits (of 32) from port Y of cell ALUArea.$and$__lft__corr.v:2528$1097 ($and).
Removed top 1 bits (of 32) from port A of cell ALUArea.$or$__lft__corr.v:2533$1100 ($or).
Removed top 3 bits (of 4) from port B of cell ALUArea.$eq$__lft__corr.v:2535$1102 ($eq).
Removed top 1 bits (of 4) from port B of cell ALUArea.$eq$__lft__corr.v:2537$1104 ($eq).
Removed top 1 bits (of 4) from port B of cell ALUArea.$eq$__lft__corr.v:2538$1105 ($eq).
Removed top 1 bits (of 4) from port B of cell ALUArea.$eq$__lft__corr.v:2543$1110 ($eq).
Removed top 2 bits (of 4) from port B of cell ALUArea.$eq$__lft__corr.v:2544$1111 ($eq).
Removed top 2 bits (of 4) from port B of cell ALUArea.$eq$__lft__corr.v:2546$1113 ($eq).
Removed top 1 bits (of 4) from port B of cell ALUArea.$eq$__lft__corr.v:2548$1115 ($eq).
Removed top 8 bits (of 32) from wire ALUArea._T_103.
Removed top 4 bits (of 32) from wire ALUArea._T_113.
Removed top 2 bits (of 32) from wire ALUArea._T_123.
Removed top 1 bits (of 32) from wire ALUArea._T_133.
Removed top 8 bits (of 32) from wire ALUArea._T_46.
Removed top 4 bits (of 32) from wire ALUArea._T_56.
Removed top 2 bits (of 32) from wire ALUArea._T_66.
Removed top 1 bits (of 32) from wire ALUArea._T_76.
Removed top 3 bits (of 32) from wire ALUArea._T_98.
Removed top 1 bits (of 33) from port Y of cell BrCondArea.$sub$__lft__corr.v:2693$1016 ($sub).
Removed top 1 bits (of 3) from port B of cell BrCondArea.$eq$__lft__corr.v:2706$1024 ($eq).
Removed top 1 bits (of 3) from port B of cell BrCondArea.$eq$__lft__corr.v:2711$1029 ($eq).
Removed top 2 bits (of 3) from port B of cell BrCondArea.$eq$__lft__corr.v:2717$1035 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:601$1159 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:602$1160 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:603$1161 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:604$1162 ($eq).
Removed top 1 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:605$1163 ($eq).
Removed top 1 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:606$1164 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:607$1165 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:608$1166 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:609$1167 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:610$1168 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:611$1169 ($eq).
Removed top 1 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:612$1170 ($eq).
Removed top 1 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:613$1171 ($eq).
Removed top 2 bits (of 12) from port A of cell CSR.$eq$__lft__corr.v:614$1172 ($eq).
Removed top 26 bits (of 32) from mux cell CSR.$ternary$__lft__corr.v:615$1173 ($mux).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:687$1241 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:689$1243 ($eq).
Removed top 2 bits (of 3) from port B of cell CSR.$eq$__lft__corr.v:691$1245 ($eq).
Removed top 1 bits (of 3) from port A of cell CSR.$eq$__lft__corr.v:699$1252 ($eq).
Removed top 1 bits (of 3) from port A of cell CSR.$eq$__lft__corr.v:701$1254 ($eq).
Removed top 2 bits (of 3) from port A of cell CSR.$eq$__lft__corr.v:703$1256 ($eq).
Removed top 1 bits (of 3) from port A of cell CSR.$eq$__lft__corr.v:712$1262 ($eq).
Removed top 2 bits (of 3) from port A of cell CSR.$eq$__lft__corr.v:714$1264 ($eq).
Removed top 1 bits (of 2) from port A of cell CSR.$eq$__lft__corr.v:718$1268 ($eq).
Removed top 23 bits (of 32) from port A of cell CSR.$add$__lft__corr.v:739$1286 ($add).
Removed top 24 bits (of 32) from port B of cell CSR.$add$__lft__corr.v:739$1286 ($add).
Removed top 23 bits (of 33) from port Y of cell CSR.$add$__lft__corr.v:739$1286 ($add).
Removed top 31 bits (of 32) from port B of cell CSR.$add$__lft__corr.v:741$1287 ($add).
Removed top 1 bits (of 33) from port Y of cell CSR.$add$__lft__corr.v:741$1287 ($add).
Removed top 31 bits (of 32) from port B of cell CSR.$add$__lft__corr.v:745$1290 ($add).
Removed top 1 bits (of 33) from port Y of cell CSR.$add$__lft__corr.v:745$1290 ($add).
Removed top 31 bits (of 32) from port B of cell CSR.$add$__lft__corr.v:748$1292 ($add).
Removed top 1 bits (of 33) from port Y of cell CSR.$add$__lft__corr.v:748$1292 ($add).
Removed top 31 bits (of 32) from port B of cell CSR.$add$__lft__corr.v:752$1295 ($add).
Removed top 1 bits (of 33) from port Y of cell CSR.$add$__lft__corr.v:752$1295 ($add).
Removed top 27 bits (of 32) from port B of cell CSR.$ne$__lft__corr.v:755$1297 ($ne).
Removed top 31 bits (of 32) from port B of cell CSR.$add$__lft__corr.v:762$1304 ($add).
Removed top 1 bits (of 33) from port Y of cell CSR.$add$__lft__corr.v:762$1304 ($add).
Removed top 31 bits (of 32) from port B of cell CSR.$add$__lft__corr.v:768$1309 ($add).
Removed top 1 bits (of 33) from port Y of cell CSR.$add$__lft__corr.v:768$1309 ($add).
Removed top 2 bits (of 4) from port B of cell CSR.$add$__lft__corr.v:775$1312 ($add).
Removed top 1 bits (of 5) from port Y of cell CSR.$add$__lft__corr.v:775$1312 ($add).
Removed top 1 bits (of 2) from mux cell CSR.$ternary$__lft__corr.v:777$1313 ($mux).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:785$1321 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:790$1322 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:792$1323 ($eq).
Removed top 1 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:793$1324 ($eq).
Removed top 1 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:794$1325 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:795$1326 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:796$1327 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:797$1328 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:801$1331 ($eq).
Removed top 2 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:803$1333 ($eq).
Removed top 1 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:804$1334 ($eq).
Removed top 1 bits (of 12) from port B of cell CSR.$eq$__lft__corr.v:805$1335 ($eq).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:867$1397 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:879$1409 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:892$1422 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:906$1436 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:920$1450 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:935$1465 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:952$1482 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:973$1503 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:994$1524 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:1015$1545 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:1024$1554 ($mux).
Removed top 3 bits (of 35) from mux cell CSR.$ternary$__lft__corr.v:1045$1575 ($mux).
Removed top 3 bits (of 35) from wire CSR._GEN_100.
Removed top 3 bits (of 35) from wire CSR._GEN_114.
Removed top 3 bits (of 35) from wire CSR._GEN_146.
Removed top 3 bits (of 35) from wire CSR._GEN_167.
Removed top 3 bits (of 35) from wire CSR._GEN_188.
Removed top 3 bits (of 35) from wire CSR._GEN_209.
Removed top 3 bits (of 35) from wire CSR._GEN_218.
Removed top 3 bits (of 35) from wire CSR._GEN_239.
Removed top 5 bits (of 35) from wire CSR._GEN_264.
Removed top 22 bits (of 35) from wire CSR._GEN_61.
Removed top 3 bits (of 35) from wire CSR._GEN_86.
Removed top 4 bits (of 10) from wire CSR._T_107.
Removed top 24 bits (of 26) from wire CSR._T_130.
Removed top 24 bits (of 28) from wire CSR._T_131.
Removed top 24 bits (of 26) from wire CSR._T_140.
Removed top 24 bits (of 28) from wire CSR._T_141.
Removed top 26 bits (of 32) from wire CSR._T_267.
Removed top 23 bits (of 33) from wire CSR._T_573.
Removed top 1 bits (of 2) from wire CSR._T_624.
Removed top 2 bits (of 32) from wire CSR._T_650.
Removed top 3 bits (of 35) from wire CSR._T_652.
Removed top 24 bits (of 32) from wire CSR.mie.
Removed top 24 bits (of 32) from wire CSR.mip.
Removed top 26 bits (of 32) from wire CSR.mstatus.
Removed top 1 bits (of 2) from port Y of cell Cache.$add$__lft__corr.v:5254$104 ($add).
Removed top 1 bits (of 2) from port Y of cell Cache.$add$__lft__corr.v:5259$108 ($add).
Removed top 2 bits (of 3) from port B of cell Cache.$eq$__lft__corr.v:5264$112 ($eq).
Removed top 1 bits (of 3) from port B of cell Cache.$eq$__lft__corr.v:5265$113 ($eq).
Removed top 255 bits (of 256) from port Y of cell Cache.$shr$__lft__corr.v:5269$116 ($shr).
Removed top 1 bits (of 2) from port A of cell Cache.$eq$__lft__corr.v:5307$130 ($eq).
Removed top 15 bits (of 19) from port A of cell Cache.$shl$__lft__corr.v:5322$146 ($shl).
Removed top 4 bits (of 20) from mux cell Cache.$ternary$__lft__corr.v:5324$147 ($mux).
Removed top 255 bits (of 256) from port A of cell Cache.$shl$__lft__corr.v:5329$149 ($shl).
Removed top 255 bits (of 256) from port Y of cell Cache.$shr$__lft__corr.v:5404$183 ($shr).
Removed top 2 bits (of 3) from port A of cell Cache.$eq$__lft__corr.v:5411$189 ($eq).
Removed top 1 bits (of 3) from port A of cell Cache.$eq$__lft__corr.v:5421$199 ($eq).
Removed top 1 bits (of 3) from port A of cell Cache.$eq$__lft__corr.v:5426$204 ($eq).
Removed top 1 bits (of 3) from mux cell Cache.$procmux$2810 ($mux).
Removed top 1 bits (of 3) from mux cell Cache.$procmux$2851 ($mux).
Removed top 1 bits (of 3) from mux cell Cache.$procmux$2853 ($mux).
Removed top 3 bits (of 19) from port Y of cell Cache.$shl$__lft__corr.v:5322$146 ($shl).
Removed top 1 bits (of 3) from wire Cache.$procmux$2810_Y.
Removed top 1 bits (of 3) from wire Cache.$procmux$2851_Y.
Removed top 1 bits (of 3) from wire Cache.$procmux$2853_Y.
Removed top 3 bits (of 19) from wire Cache._T_268.
Removed top 4 bits (of 20) from wire Cache.wmask.
Removed top 25 bits (of 32) from port B of cell Control.$and$__lft__corr.v:3995$356 ($and).
Removed top 26 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:3996$357 ($eq).
Removed top 27 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:3997$358 ($eq).
Removed top 25 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:3998$359 ($eq).
Removed top 17 bits (of 32) from port B of cell Control.$and$__lft__corr.v:3999$360 ($and).
Removed top 25 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4000$361 ($eq).
Removed top 25 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4001$362 ($eq).
Removed top 19 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4002$363 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4003$364 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4004$365 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4005$366 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4006$367 ($eq).
Removed top 30 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4007$368 ($eq).
Removed top 19 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4008$369 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4009$370 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4010$371 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4011$372 ($eq).
Removed top 26 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4012$373 ($eq).
Removed top 19 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4013$374 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4014$375 ($eq).
Removed top 27 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4015$376 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4016$377 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4017$378 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4018$379 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4019$380 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4020$381 ($eq).
Removed top 19 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4022$383 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4023$384 ($eq).
Removed top 1 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4024$385 ($eq).
Removed top 26 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4025$386 ($eq).
Removed top 1 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4026$387 ($eq).
Removed top 19 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4027$388 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4028$389 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4029$390 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4030$391 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4031$392 ($eq).
Removed top 1 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4032$393 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4033$394 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4034$395 ($eq).
Removed top 28 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4036$397 ($eq).
Removed top 19 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4037$398 ($eq).
Removed top 19 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4038$399 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4039$400 ($eq).
Removed top 18 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4040$401 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4041$402 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4042$403 ($eq).
Removed top 17 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4043$404 ($eq).
Removed top 25 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4044$405 ($eq).
Removed top 11 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4045$406 ($eq).
Removed top 3 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4046$407 ($eq).
Removed top 3 bits (of 32) from port A of cell Control.$eq$__lft__corr.v:4047$408 ($eq).
Removed top 1 bits (of 4) from mux cell Control.$ternary$__lft__corr.v:4218$579 ($mux).
Removed top 1 bits (of 4) from mux cell Control.$ternary$__lft__corr.v:4219$580 ($mux).
Removed top 1 bits (of 4) from mux cell Control.$ternary$__lft__corr.v:4220$581 ($mux).
Removed top 1 bits (of 4) from mux cell Control.$ternary$__lft__corr.v:4221$582 ($mux).
Removed top 1 bits (of 4) from mux cell Control.$ternary$__lft__corr.v:4222$583 ($mux).
Removed top 1 bits (of 2) from mux cell Control.$ternary$__lft__corr.v:4317$678 ($mux).
Removed top 1 bits (of 4) from wire Control._T_428.
Removed top 1 bits (of 4) from wire Control._T_429.
Removed top 1 bits (of 4) from wire Control._T_430.
Removed top 1 bits (of 2) from wire Control._T_596.
Removed top 1 bits (of 2) from port B of cell Datapath.$eq$__lft__corr.v:3041$903 ($eq).
Removed top 30 bits (of 33) from port B of cell Datapath.$add$__lft__corr.v:3047$908 ($add).
Removed top 1 bits (of 34) from port Y of cell Datapath.$add$__lft__corr.v:3047$908 ($add).
Removed top 1 bits (of 33) from mux cell Datapath.$ternary$__lft__corr.v:3077$934 ($mux).
Removed top 3 bits (of 8) from port A of cell Datapath.$or$__lft__corr.v:3090$941 ($or).
Removed top 4 bits (of 8) from port B of cell Datapath.$or$__lft__corr.v:3090$941 ($or).
Removed top 3 bits (of 8) from port Y of cell Datapath.$or$__lft__corr.v:3090$941 ($or).
Removed top 255 bits (of 287) from port A of cell Datapath.$shl$__lft__corr.v:3096$946 ($shl).
Removed top 3 bits (of 8) from port B of cell Datapath.$shl$__lft__corr.v:3096$946 ($shl).
Removed top 255 bits (of 287) from port Y of cell Datapath.$shl$__lft__corr.v:3096$946 ($shl).
Removed top 3 bits (of 5) from port A of cell Datapath.$shl$__lft__corr.v:3099$948 ($shl).
Removed top 3 bits (of 4) from port A of cell Datapath.$shl$__lft__corr.v:3100$949 ($shl).
Removed top 1 bits (of 2) from port A of cell Datapath.$eq$__lft__corr.v:3105$954 ($eq).
Removed top 1 bits (of 5) from mux cell Datapath.$ternary$__lft__corr.v:3106$955 ($mux).
Removed top 3 bits (of 8) from port A of cell Datapath.$or$__lft__corr.v:3142$986 ($or).
Removed top 4 bits (of 8) from port B of cell Datapath.$or$__lft__corr.v:3142$986 ($or).
Removed top 3 bits (of 8) from port Y of cell Datapath.$or$__lft__corr.v:3142$986 ($or).
Removed top 3 bits (of 8) from port B of cell Datapath.$shr$__lft__corr.v:3143$987 ($shr).
Removed top 16 bits (of 32) from port Y of cell Datapath.$shr$__lft__corr.v:3143$987 ($shr).
Removed top 1 bits (of 33) from mux cell Datapath.$ternary$__lft__corr.v:3152$989 ($mux).
Removed top 1 bits (of 33) from mux cell Datapath.$ternary$__lft__corr.v:3154$991 ($mux).
Removed top 1 bits (of 3) from port A of cell Datapath.$eq$__lft__corr.v:3155$992 ($eq).
Removed top 1 bits (of 3) from port A of cell Datapath.$eq$__lft__corr.v:3157$994 ($eq).
Removed top 30 bits (of 33) from port B of cell Datapath.$add$__lft__corr.v:3160$996 ($add).
Removed top 1 bits (of 34) from port Y of cell Datapath.$add$__lft__corr.v:3160$996 ($add).
Removed top 1 bits (of 33) from mux cell Datapath.$ternary$__lft__corr.v:3165$998 ($mux).
Removed top 1 bits (of 34) from mux cell Datapath.$ternary$__lft__corr.v:3167$1000 ($mux).
Removed top 1 bits (of 2) from port A of cell Datapath.$eq$__lft__corr.v:3168$1001 ($eq).
Removed top 2 bits (of 34) from mux cell Datapath.$ternary$__lft__corr.v:3169$1002 ($mux).
Removed top 1 bits (of 5) from mux cell Datapath.$ternary$__lft__corr.v:3104$953 ($mux).
Removed top 1 bits (of 33) from mux cell Datapath.$ternary$__lft__corr.v:3158$995 ($mux).
Removed top 1 bits (of 33) from mux cell Datapath.$ternary$__lft__corr.v:3167$1000 ($mux).
Removed top 1 bits (of 5) from port Y of cell Datapath.$shl$__lft__corr.v:3099$948 ($shl).
Removed top 1 bits (of 33) from mux cell Datapath.$ternary$__lft__corr.v:3156$993 ($mux).
Removed top 1 bits (of 33) from port Y of cell Datapath.$add$__lft__corr.v:3160$996 ($add).
Removed top 1 bits (of 33) from port A of cell Datapath.$add$__lft__corr.v:3160$996 ($add).
Removed top 2 bits (of 33) from wire Datapath._GEN_24.
Removed top 5 bits (of 35) from wire Datapath._GEN_25.
Removed top 1 bits (of 32) from wire Datapath._T_164.
Removed top 1 bits (of 33) from wire Datapath._T_166.
Removed top 2 bits (of 32) from wire Datapath._T_204.
Removed top 3 bits (of 8) from wire Datapath._T_208.
Removed top 1 bits (of 5) from wire Datapath._T_226.
Removed top 1 bits (of 5) from wire Datapath._T_233.
Removed top 3 bits (of 8) from wire Datapath._T_257.
Removed top 1 bits (of 33) from wire Datapath._T_271.
Removed top 1 bits (of 33) from wire Datapath._T_273.
Removed top 1 bits (of 33) from wire Datapath._T_275.
Removed top 2 bits (of 34) from wire Datapath._T_279.
Removed top 1 bits (of 33) from wire Datapath.load.
Removed top 3 bits (of 8) from wire Datapath.loffset.
Removed top 3 bits (of 8) from wire Datapath.woffset.
Removed top 10 bits (of 12) from port B of cell ImmGenWire.$and$__lft__corr.v:2640$1041 ($and).
Removed top 1 bits (of 3) from port A of cell ImmGenWire.$eq$__lft__corr.v:2646$1046 ($eq).
Removed top 1 bits (of 3) from port A of cell ImmGenWire.$eq$__lft__corr.v:2650$1050 ($eq).
Removed top 2 bits (of 3) from port A of cell ImmGenWire.$eq$__lft__corr.v:2652$1052 ($eq).
Removed top 1 bits (of 3) from port B of cell MemArbiter.$eq$__lft__corr.v:6028$22 ($eq).
Removed top 2 bits (of 3) from port B of cell MemArbiter.$eq$__lft__corr.v:6043$37 ($eq).
Removed top 1 bits (of 3) from port B of cell MemArbiter.$eq$__lft__corr.v:6045$39 ($eq).
Removed top 2 bits (of 3) from port A of cell MemArbiter.$eq$__lft__corr.v:6057$51 ($eq).
Removed top 1 bits (of 3) from port A of cell MemArbiter.$eq$__lft__corr.v:6061$55 ($eq).
Removed top 1 bits (of 3) from port A of cell MemArbiter.$eq$__lft__corr.v:6062$56 ($eq).
Removed top 1 bits (of 4) from port B of cell Tile.$eq$__lft__corr.v:6571$8 ($eq).
Removed top 27 bits (of 32) from port B of cell Tile.$shl$__lft__corr.v:6572$11 ($shl).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \Tile..
Removed 0 unused cells and 57 unused wires.
<suppressed ~5 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUArea.
Optimizing module BrCondArea.
Optimizing module CSR.
Optimizing module Cache.
Optimizing module Control.
Optimizing module Core.
Optimizing module Datapath.
Optimizing module ImmGenWire.
Optimizing module MemArbiter.
Optimizing module RegFile.
Optimizing module Tile.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUArea'.
Finding identical cells in module `\BrCondArea'.
Finding identical cells in module `\CSR'.
Finding identical cells in module `\Cache'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\Core'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\ImmGenWire'.
Finding identical cells in module `\MemArbiter'.
Finding identical cells in module `\RegFile'.
Finding identical cells in module `\Tile'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \Tile..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== ALUArea ===

   Number of wires:                131
   Number of wire bits:           3211
   Number of public wires:         131
   Number of public wire bits:    3211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 62
     $add                            1
     $and                           20
     $eq                            11
     $logic_not                      1
     $mux                           12
     $or                            14
     $sshr                           1
     $sub                            1
     $xor                            1

=== BrCondArea ===

   Number of wires:                 34
   Number of wire bits:            193
   Number of public wires:          34
   Number of public wire bits:     193
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 25
     $and                            6
     $eq                             7
     $mux                            2
     $not                            3
     $or                             5
     $reduce_bool                    1
     $sub                            1

=== CSR ===

   Number of wires:                557
   Number of wire bits:          10100
   Number of public wires:         298
   Number of public wire bits:    3471
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                485
     $add                            8
     $and                           15
     $dff                           21
     $eq                            59
     $le                             1
     $logic_not                      4
     $mux                          317
     $ne                             1
     $not                           11
     $or                            45
     $reduce_bool                    3

=== Cache ===

   Number of wires:                454
   Number of wire bits:           8567
   Number of public wires:         332
   Number of public wire bits:    6315
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                263
     $add                            2
     $and                           32
     $dff                           30
     $eq                            13
     $logic_not                      1
     $mem                           17
     $mux                          147
     $not                            6
     $or                             9
     $reduce_bool                    2
     $shl                            2
     $shr                            2

=== Control ===

   Number of wires:                557
   Number of wire bits:           1197
   Number of public wires:         557
   Number of public wire bits:    1197
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                543
     $and                            4
     $eq                            49
     $mux                          490

=== Core ===

   Number of wires:                 74
   Number of wire bits:            932
   Number of public wires:          74
   Number of public wire bits:     932
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     Control                         1
     Datapath                        1

=== Datapath ===

   Number of wires:                240
   Number of wire bits:           4047
   Number of public wires:         211
   Number of public wire bits:    3537
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                121
     $add                            2
     $and                           11
     $dff                           15
     $eq                            16
     $logic_not                      1
     $mux                           50
     $not                            4
     $or                             9
     $reduce_bool                    4
     $shl                            3
     $shr                            1
     ALUArea                         1
     BrCondArea                      1
     CSR                             1
     ImmGenWire                      1
     RegFile                         1

=== ImmGenWire ===

   Number of wires:                 47
   Number of wire bits:            593
   Number of public wires:          47
   Number of public wire bits:     593
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $and                            1
     $eq                             6
     $mux                            6

=== MemArbiter ===

   Number of wires:                 90
   Number of wire bits:            617
   Number of public wires:          78
   Number of public wire bits:     581
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     $and                           23
     $dff                            1
     $eq                             8
     $logic_not                      1
     $mux                           13
     $not                            2
     $or                             2

=== RegFile ===

   Number of wires:                 25
   Number of wire bits:            363
   Number of public wires:          22
   Number of public wire bits:     294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $and                            1
     $mem                            1
     $mux                            5
     $reduce_bool                    3

=== Tile ===

   Number of wires:                173
   Number of wire bits:           2111
   Number of public wires:         167
   Number of public wire bits:    2074
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $assert                         1
     $assume                         1
     $dff                            3
     $eq                             2
     $shl                            1
     Cache                           2
     Core                            1
     MemArbiter                      1

=== design hierarchy ===

   Tile                              1
     Cache                           2
     Core                            1
       Control                       1
       Datapath                      1
         ALUArea                     1
         BrCondArea                  1
         CSR                         1
         ImmGenWire                  1
         RegFile                     1
     MemArbiter                      1

   Number of wires:               2836
   Number of wire bits:          40498
   Number of public wires:        2283
   Number of public wire bits:   28713
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1838
     $add                           15
     $and                          145
     $assert                         1
     $assume                         1
     $dff                          100
     $eq                           184
     $le                             1
     $logic_not                      9
     $mem                           35
     $mux                         1189
     $ne                             1
     $not                           32
     $or                            93
     $reduce_bool                   15
     $shl                            8
     $shr                            5
     $sshr                           1
     $sub                            2
     $xor                            1

2.13. Executing CHECK pass (checking for obvious problems).
Checking module ALUArea...
Checking module BrCondArea...
Checking module CSR...
Checking module Cache...
Checking module Control...
Checking module Core...
Checking module Datapath...
Checking module ImmGenWire...
Checking module MemArbiter...
Checking module RegFile...
Checking module Tile...
Found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \Tile..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUArea.
Optimizing module BrCondArea.
Optimizing module CSR.
Optimizing module Cache.
Optimizing module Control.
Optimizing module Core.
Optimizing module Datapath.
Optimizing module ImmGenWire.
Optimizing module MemArbiter.
Optimizing module RegFile.
Optimizing module Tile.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUArea'.
Finding identical cells in module `\BrCondArea'.
Finding identical cells in module `\CSR'.
Finding identical cells in module `\Cache'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\Core'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\ImmGenWire'.
Finding identical cells in module `\MemArbiter'.
Finding identical cells in module `\RegFile'.
Finding identical cells in module `\Tile'.
Removed a total of 0 cells.

7.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$2922 ($dff) from module CSR (D = $procmux$1898_Y, Q = \mtohost, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$3258 ($sdff) from module CSR (D = \wdata, Q = \mtohost).
Adding EN signal on $procdff$2921 ($dff) from module CSR (D = $procmux$1939_Y, Q = \mbadaddr).
Adding EN signal on $procdff$2920 ($dff) from module CSR (D = $procmux$1966_Y, Q = \mcause).
Adding SRST signal on $auto$opt_dff.cc:764:run$3345 ($dffe) from module CSR (D = $procmux$1963_Y [31:4], Q = \mcause [31:4], rval = 28'0000000000000000000000000000).
Adding EN signal on $procdff$2919 ($dff) from module CSR (D = \_GEN_218, Q = \mepc).
Adding SRST signal on $auto$opt_dff.cc:764:run$3371 ($dffe) from module CSR (D = \_GEN_209 [1:0], Q = \mepc [1:0], rval = 2'00).
Adding EN signal on $procdff$2918 ($dff) from module CSR (D = \wdata, Q = \mscratch).
Adding EN signal on $procdff$2917 ($dff) from module CSR (D = \wdata, Q = \mtimecmp).
Adding SRST signal on $procdff$2916 ($dff) from module CSR (D = $procmux$2042_Y, Q = \MSIE, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3413 ($sdff) from module CSR (D = \wdata [3], Q = \MSIE).
Adding SRST signal on $procdff$2915 ($dff) from module CSR (D = $procmux$2057_Y, Q = \MSIP, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3427 ($sdff) from module CSR (D = \wdata [3], Q = \MSIP).
Adding SRST signal on $procdff$2914 ($dff) from module CSR (D = $procmux$2074_Y, Q = \MTIE, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3439 ($sdff) from module CSR (D = \wdata [7], Q = \MTIE).
Adding SRST signal on $procdff$2913 ($dff) from module CSR (D = $procmux$2089_Y, Q = \MTIP, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3453 ($sdff) from module CSR (D = \wdata [7], Q = \MTIP).
Adding SRST signal on $procdff$2912 ($dff) from module CSR (D = $procmux$2104_Y, Q = \IE1, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3465 ($sdff) from module CSR (D = $procmux$2102_Y, Q = \IE1).
Adding SRST signal on $procdff$2911 ($dff) from module CSR (D = $procmux$2119_Y, Q = \IE, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3475 ($sdff) from module CSR (D = $procmux$2117_Y, Q = \IE).
Adding SRST signal on $procdff$2910 ($dff) from module CSR (D = $procmux$2134_Y, Q = \PRV1, rval = 2'11).
Adding EN signal on $auto$opt_dff.cc:702:run$3485 ($sdff) from module CSR (D = $procmux$2132_Y, Q = \PRV1).
Adding SRST signal on $procdff$2909 ($dff) from module CSR (D = $procmux$2149_Y, Q = \PRV, rval = 2'11).
Adding EN signal on $auto$opt_dff.cc:702:run$3495 ($sdff) from module CSR (D = $procmux$2147_Y, Q = \PRV).
Adding SRST signal on $procdff$2908 ($dff) from module CSR (D = $procmux$2235_Y, Q = \instreth, rval = 0).
Adding SRST signal on $procdff$2907 ($dff) from module CSR (D = $procmux$2312_Y, Q = \instret, rval = 0).
Adding SRST signal on $procdff$2906 ($dff) from module CSR (D = $procmux$2392_Y, Q = \cycleh, rval = 0).
Adding SRST signal on $procdff$2905 ($dff) from module CSR (D = $procmux$1716_Y, Q = \cycle, rval = 0).
Adding SRST signal on $procdff$2904 ($dff) from module CSR (D = $procmux$2484_Y, Q = \timeh, rval = 0).
Adding SRST signal on $procdff$2903 ($dff) from module CSR (D = $procmux$1791_Y, Q = \time$, rval = 0).
Adding EN signal on $procdff$2971 ($dff) from module Cache (D = \io_nasti_r_bits_data, Q = \refill_buf_1).
Adding EN signal on $procdff$2970 ($dff) from module Cache (D = \io_nasti_r_bits_data, Q = \refill_buf_0).
Adding SRST signal on $procdff$2966 ($dff) from module Cache (D = $procmux$2746_Y, Q = \value_1, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3519 ($sdff) from module Cache (D = \_T_126, Q = \value_1).
Adding SRST signal on $procdff$2965 ($dff) from module Cache (D = $procmux$2751_Y, Q = \value, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3521 ($sdff) from module Cache (D = \_T_118, Q = \value).
Adding EN signal on $procdff$2964 ($dff) from module Cache (D = \io_cpu_req_bits_mask, Q = \cpu_mask).
Adding EN signal on $procdff$2963 ($dff) from module Cache (D = \io_cpu_req_bits_data, Q = \cpu_data).
Adding EN signal on $procdff$2962 ($dff) from module Cache (D = \io_cpu_req_bits_addr, Q = \addr_reg).
Adding EN signal on $procdff$2961 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_3_3__T_210_addr_pipe_0).
Adding EN signal on $procdff$2960 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_3_2__T_210_addr_pipe_0).
Adding EN signal on $procdff$2959 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_3_1__T_210_addr_pipe_0).
Adding EN signal on $procdff$2958 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_3_0__T_210_addr_pipe_0).
Adding EN signal on $procdff$2957 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_2_3__T_190_addr_pipe_0).
Adding EN signal on $procdff$2956 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_2_2__T_190_addr_pipe_0).
Adding EN signal on $procdff$2955 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_2_1__T_190_addr_pipe_0).
Adding EN signal on $procdff$2954 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_2_0__T_190_addr_pipe_0).
Adding EN signal on $procdff$2953 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_1_3__T_170_addr_pipe_0).
Adding EN signal on $procdff$2952 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_1_2__T_170_addr_pipe_0).
Adding EN signal on $procdff$2951 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_1_1__T_170_addr_pipe_0).
Adding EN signal on $procdff$2950 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_1_0__T_170_addr_pipe_0).
Adding EN signal on $procdff$2949 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_0_3__T_150_addr_pipe_0).
Adding EN signal on $procdff$2948 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_0_2__T_150_addr_pipe_0).
Adding EN signal on $procdff$2947 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_0_1__T_150_addr_pipe_0).
Adding EN signal on $procdff$2946 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \dataMem_0_0__T_150_addr_pipe_0).
Adding EN signal on $procdff$2945 ($dff) from module Cache (D = \io_cpu_req_bits_addr [11:4], Q = \metaMem_tag_rmeta_addr_pipe_0).
Adding SRST signal on $procdff$2944 ($dff) from module Cache (D = $procmux$2799_Y, Q = \d, rval = 256'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$opt_dff.cc:702:run$3543 ($sdff) from module Cache (D = $procmux$2797_Y, Q = \d).
Adding SRST signal on $procdff$2943 ($dff) from module Cache (D = $procmux$2804_Y, Q = \v, rval = 256'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$opt_dff.cc:702:run$3545 ($sdff) from module Cache (D = \_T_279, Q = \v).
Adding SRST signal on $procdff$2942 ($dff) from module Cache (D = $procmux$2865_Y, Q = \state, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$3547 ($sdff) from module Cache (D = $procmux$2865_Y, Q = \state).
Adding SRST signal on $procdff$2941 ($dff) from module Datapath (D = \npc, Q = \pc, rval = 33'000000000000000000000000111111100).
Adding EN signal on $auto$opt_dff.cc:702:run$3561 ($sdff) from module Datapath (D = \_T_174 [32], Q = \pc [32]).
Adding SRST signal on $procdff$2939 ($dff) from module Datapath (D = $procmux$2514_Y, Q = \pc_check, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3569 ($sdff) from module Datapath (D = \_T_161, Q = \pc_check).
Adding SRST signal on $procdff$2938 ($dff) from module Datapath (D = $procmux$2519_Y, Q = \illegal, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3571 ($sdff) from module Datapath (D = \io_ctrl_illegal, Q = \illegal).
Adding SRST signal on $procdff$2937 ($dff) from module Datapath (D = $procmux$2524_Y, Q = \csr_cmd, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$3573 ($sdff) from module Datapath (D = \io_ctrl_csr_cmd, Q = \csr_cmd).
Adding SRST signal on $procdff$2936 ($dff) from module Datapath (D = $procmux$2529_Y, Q = \wb_en, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$3575 ($sdff) from module Datapath (D = \io_ctrl_wb_en, Q = \wb_en).
Adding EN signal on $procdff$2935 ($dff) from module Datapath (D = \io_ctrl_wb_sel, Q = \wb_sel).
Adding SRST signal on $procdff$2934 ($dff) from module Datapath (D = $procmux$2538_Y, Q = \ld_type, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$3582 ($sdff) from module Datapath (D = \io_ctrl_ld_type, Q = \ld_type).
Adding SRST signal on $procdff$2933 ($dff) from module Datapath (D = $procmux$2543_Y, Q = \st_type, rval = 2'00).
Adding EN signal on $auto$opt_dff.cc:702:run$3584 ($sdff) from module Datapath (D = \io_ctrl_st_type, Q = \st_type).
Adding EN signal on $procdff$2932 ($dff) from module Datapath (D = $procmux$2552_Y, Q = \csr_in).
Adding EN signal on $procdff$2931 ($dff) from module Datapath (D = \alu_io_out, Q = \ew_alu).
Adding EN signal on $procdff$2930 ($dff) from module Datapath (D = \fe_pc, Q = \ew_pc).
Adding SRST signal on $procdff$2929 ($dff) from module Datapath (D = $procmux$2568_Y, Q = \ew_inst, rval = 19).
Adding EN signal on $auto$opt_dff.cc:702:run$3601 ($sdff) from module Datapath (D = \fe_inst, Q = \ew_inst).
Adding EN signal on $procdff$2928 ($dff) from module Datapath (D = \pc, Q = \fe_pc).
Adding SRST signal on $procdff$2927 ($dff) from module Datapath (D = $procmux$2578_Y, Q = \fe_inst, rval = 19).
Adding EN signal on $auto$opt_dff.cc:702:run$3608 ($sdff) from module Datapath (D = $procmux$2576_Y, Q = \fe_inst).
Adding SRST signal on $procdff$3023 ($dff) from module MemArbiter (D = $procmux$2898_Y, Q = \state, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$3610 ($sdff) from module MemArbiter (D = $procmux$2898_Y, Q = \state).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \Tile..
Removed 150 unused cells and 150 unused wires.
<suppressed ~155 debug messages>

7.5. Rerunning OPT passes. (Removed registers in this run.)

7.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUArea.
Optimizing module BrCondArea.
Optimizing module CSR.
<suppressed ~7 debug messages>
Optimizing module Cache.
<suppressed ~1 debug messages>
Optimizing module Control.
Optimizing module Core.
Optimizing module Datapath.
Optimizing module ImmGenWire.
Optimizing module MemArbiter.
<suppressed ~1 debug messages>
Optimizing module RegFile.
Optimizing module Tile.

7.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUArea'.
Finding identical cells in module `\BrCondArea'.
Finding identical cells in module `\CSR'.
<suppressed ~225 debug messages>
Finding identical cells in module `\Cache'.
<suppressed ~48 debug messages>
Finding identical cells in module `\Control'.
Finding identical cells in module `\Core'.
Finding identical cells in module `\Datapath'.
<suppressed ~27 debug messages>
Finding identical cells in module `\ImmGenWire'.
Finding identical cells in module `\MemArbiter'.
Finding identical cells in module `\RegFile'.
Finding identical cells in module `\Tile'.
Removed a total of 100 cells.

7.8. Executing OPT_DFF pass (perform DFF optimizations).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUArea..
Finding unused cells or wires in module \BrCondArea..
Finding unused cells or wires in module \CSR..
Finding unused cells or wires in module \Cache..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \Core..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \ImmGenWire..
Finding unused cells or wires in module \MemArbiter..
Finding unused cells or wires in module \RegFile..
Finding unused cells or wires in module \Tile..
Removed 0 unused cells and 84 unused wires.
<suppressed ~2 debug messages>

7.10. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
Checking module ALUArea...
Checking module BrCondArea...
Checking module CSR...
Checking module Cache...
Checking module Control...
Checking module Core...
Checking module Datapath...
Checking module ImmGenWire...
Checking module MemArbiter...
Checking module RegFile...
Checking module Tile...
Found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \Tile
Used module:     \MemArbiter
Used module:     \Core
Used module:         \Control
Used module:         \Datapath
Used module:             \ALUArea
Used module:             \BrCondArea
Used module:             \CSR
Used module:             \ImmGenWire
Used module:             \RegFile
Used module:     \Cache

9.2. Analyzing design hierarchy..
Top module:  \Tile
Used module:     \MemArbiter
Used module:     \Core
Used module:         \Control
Used module:         \Datapath
Used module:             \ALUArea
Used module:             \BrCondArea
Used module:             \CSR
Used module:             \ImmGenWire
Used module:             \RegFile
Used module:     \Cache
Removed 0 unused modules.
Module Tile directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: a1db532ef6, CPU: user 1.97s system 0.00s, MEM: 41.12 MB peak
Yosys 0.9+4052 (git sha1 a58571d0, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 28% 3x check (0 sec), 25% 8x opt_clean (0 sec), ...
